name: Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version:   ${{ steps.extract_version.outputs.VERSION }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Extract version from tag
        id: extract_version
        run: |
          # strip "refs/tags/" prefix
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name:    ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            ðŸš€ Automated release for **${{ env.VERSION }}**  
            - Builds for multiple OS/ARCH combos  
          draft:      false
          prerelease: false

  build_and_upload:
    name: Build & Upload Binaries
    needs: create_release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [darwin, linux, windows]
        goarch: [amd64, arm, arm64]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Configure version and arch
        run: |
          echo "VERSION=${{ needs.create_release.outputs.version }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

      - name: Build ${{ matrix.goos }}/\${{ matrix.goarch }}
        env:
          GOOS:   ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ env.VERSION }}
        run: |
          set -e
          ext=""
          # on Windows produce .exe
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi

          bin="liftoff-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}${ext}"
          mkdir -p dist
          go build -o dist/${bin} ./cmd/liftoff

          # compress (tar.gz for all platforms)
          tar czf dist/${bin}.tar.gz -C dist ${bin}

      - name: Upload ${{ matrix.goos }}/\${{ matrix.goarch }} to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url:       ${{ needs.create_release.outputs.upload_url }}
          asset_path:       dist/liftoff-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}.tar.gz
          asset_name:       liftoff-${{ env.VERSION }}-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
          asset_content_type: application/gzip
