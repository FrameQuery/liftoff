name: Publish Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  release:
    name: Create Release & Build Binaries
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      matrix: ${{ steps.setup_matrix.outputs.matrix }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper version info

      - name: Extract version from tag
        id: extract_version
        run: |
          # strip "refs/tags/" prefix
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Create Release
        run: |
          # GitHub CLI is pre-installed on GitHub-hosted runners
          gh release create ${{ steps.extract_version.outputs.version }} \
            --title "Release ${{ steps.extract_version.outputs.version }}" \
            --notes "ðŸš€ Automated release for **${{ steps.extract_version.outputs.version }}**  
            - Builds for multiple OS/ARCH combos"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup matrix for build
        id: setup_matrix
        run: |
          echo "matrix=$(jq -c . << EOF
          {
            "include": [
              {"goos": "darwin", "goarch": "amd64"},
              {"goos": "darwin", "goarch": "arm64"},
              {"goos": "linux", "goarch": "amd64"},
              {"goos": "linux", "goarch": "arm"},
              {"goos": "linux", "goarch": "arm64"},
              {"goos": "windows", "goarch": "amd64"},
              {"goos": "windows", "goarch": "arm"},
              {"goos": "windows", "goarch": "arm64"}
            ]
          }
          EOF)" >> $GITHUB_OUTPUT

  build:
    needs: release
    name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.release.outputs.matrix) }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Build ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          set -e
          ext=""
          # on Windows produce .exe
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi

          bin="liftoff-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}${ext}"
          mkdir -p dist
          go build -o "dist/${bin}" ./cmd/liftoff

          # compress (tar.gz for all platforms)
          tar czf "dist/${bin}.tar.gz" -C dist "${bin}"

      - name: Upload Asset to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          ext=""
          if [ "${{ matrix.goos }}" = "windows" ]; then
            ext=".exe"
          fi

          bin="liftoff-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}${ext}"
          # GitHub CLI is pre-installed on GitHub-hosted runners
          gh release upload ${VERSION} "dist/${bin}.tar.gz" --clobber
